# -*- coding: utf-8 -*-
"""Web_Page_Analyzer.ipynb

Automatically generated by Colaboratory.
"""

!pip install anthropic beautifulsoup4 requests

from anthropic import Anthropic
from bs4 import BeautifulSoup
import requests
from IPython.display import HTML, display
from ipywidgets import widgets

def create_ui():
    # UI 구성요소 생성
    api_key_input = widgets.Password(
        description='API Key:',
        placeholder='Anthropic API 키를 입력하세요',
        style={'description_width': 'initial'},
        layout={'width': '500px'}
    )

    url_input = widgets.Text(
        description='URL:',
        placeholder='분석할 웹페이지 URL을 입력하세요',
        style={'description_width': 'initial'},
        layout={'width': '500px'}
    )

    method_select = widgets.RadioButtons(
        options=['URL', 'Text'],
        description='입력 방식:',
        style={'description_width': 'initial'}
    )

    text_input = widgets.Textarea(
        placeholder='직접 텍스트를 입력하세요',
        layout={'width': '500px', 'height': '200px'},
        disabled=True
    )

    output_area = widgets.Output()
    
    return api_key_input, url_input, method_select, text_input, output_area

def analyze_webpage(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        title = soup.title.string if soup.title else "제목 없음"
        paragraphs = soup.find_all('p')
        content = ' '.join([p.text for p in paragraphs])
        
        if len(content) > 1500:
            content = content[:1500] + "..."
            
        return title, content
    except Exception as e:
        return None, f"에러 발생: {str(e)}"

def summarize_text(api_key, text):
    anthropic = Anthropic(api_key=api_key)
    
    try:
        message = anthropic.messages.create(
            model="claude-3-5-sonnet-20240620",
            max_tokens=1000,
            temperature=0.7,
            messages=[{
                "role": "user",
                "content": f"다음 웹 페이지 내용을 분석하고 아래 형식으로 요약해주세요:\n\n{text}"
            }]
        )
        formatted_content = format_result(message.content)
        return HTML(formatted_content)
    except Exception as e:
        return f"요약 중 에러 발생: {str(e)}"

def format_result(content):
    return f"""
    <div style="font-family: 'Nanum Gothic', sans-serif; padding: 20px; line-height: 1.8;">
        <h1 style="text-align: center; margin-bottom: 30px;">
            📊 분석 결과 📊
        </h1>
        
        <div style="margin-bottom: 20px;">
            🎯 ★★내용 요약 (핵심 포인트 5개):★★
        </div>
        
        <ol style="list-style-type: none; padding-left: 0;">
            {content}
        </ol>
    </div>
    """

def main():
    api_key_input, url_input, method_select, text_input, output_area = create_ui()
    
    def on_method_change(change):
        if change['new'] == 'Text':
            text_input.disabled = False
            url_input.disabled = True
        else:
            text_input.disabled = True
            url_input.disabled = False
    
    method_select.observe(on_method_change, names='value')
    
    def on_analyze_button_clicked(b):
        with output_area:
            output_area.clear_output()
            
            if not api_key_input.value:
                print("Anthropic API 키를 입력해주세요.")
                return
                
            if method_select.value == 'URL':
                if not url_input.value:
                    print("URL을 입력해주세요.")
                    return
                    
                print("웹 페이지 분석 중...")
                title, content = analyze_webpage(url_input.value)
                
                if title is None:
                    print(content)
                    return
            else:
                if not text_input.value:
                    print("텍스트를 입력해주세요.")
                    return
                    
                title = "사용자 입력 텍스트"
                content = text_input.value

            summary = summarize_text(api_key_input.value, content)
            display(summary)
    
    analyze_button = widgets.Button(description='분석 시작')
    analyze_button.on_click(on_analyze_button_clicked)
    
    # UI 표시
    display(HTML("<h2>웹 페이지 분석 및 요약</h2>"))
    display(api_key_input)
    display(method_select)
    display(url_input)
    display(text_input)
    display(analyze_button)
    display(output_area)

if __name__ == "__main__":
    main()
